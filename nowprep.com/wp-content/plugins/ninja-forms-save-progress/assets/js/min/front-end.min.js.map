{"version":3,"sources":["monster.js","active.js","passive.js","saveButton.js","saveModel.js","savesCollection.js","saveItemView.js","saveEmptyView.js","savesLoadingView.js","savesCollectionView.js","app.js","main.js"],"names":["nfCookieMonster","set","name","value","days","path","secure","date","Date","expires","type","valueToUse","secureFlag","setTime","getTime","toUTCString","window","encodeURIComponent","JSON","stringify","v","document","cookie","get","nameEQ","ca","split","firstChar","parsed","i","length","c","charAt","substring","indexOf","decodeURIComponent","parse","e","remove","this","increment","parseInt","decrement","nfSaveProgressActiveController","Marionette","Object","extend","endpoint","nfSaveProgress","restApiEndpoint","initialize","options","listenTo","Backbone","Radio","channel","onFormRenderView","formLayoutView","currentUserID","formModel","model","saveField","findWhere","jQuery","renderSaveTable","loadLastSave","loading","SavesLoadingView","render","ajax","url","data","_wpnonce","wpApiSettings","nonce","cache","success","textStatus","jqXHR","$el","slideUp","saves","save","pop","save_id","fields","request","error","collection","SavesCollection","fetch","SavesCollectionView","nfSaveProgressPassiveController","nfRadio","onFormRendered","formView","formData","onChangeModelValue","fieldModel","formID","fieldData","nfSaveProgressSaveButtonController","reply","maybeValidate","registerHandlers","maybeHide","click","getExtra","formChannel","beforeSubmit","reset","bind","response","registerSubmitHandlers","trigger","fieldView","setTimeout","console","log","settings","hide_complete","form_id","hide","SaveModel","Model","Collection","models","setAuthHeaders","xhr","setRequestHeader","sync","method","beforeSend","SaveItemView","ItemView","tagName","className","template","events","click .load","target","closest","find","removeClass","addClass","click .cancel","fieldsCollection","defaults","templateHelpers","view","updated","moment","format","columns","$return","_","each","column","field","savedField","id","fieldValue","SaveEmptyView","on","afterRender","that","el","CompositeView","childView","emptyView","childViewContainer","collectionView","onRender","parent","show","headers","NF_SaveProgress","Application","getfieldAttributes","updateFieldsCollection","atts","map","key","omit","attributes","savedFields","fieldID","visible","toString","ready","$","start"],"mappings":"AAUA,GAAAA,kBACAC,IAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAA,GAAAC,MACAC,EAAA,GACAC,QAAA,GACAC,EAAA,GACAC,EAAA,EAMA,IALAP,EAAAA,GAAA,IACAD,IACAG,EAAAM,QAAAN,EAAAO,UAAA,GAAAV,EAAA,GAAA,GAAA,KACAK,EAAA,aAAAF,EAAAQ,eAEA,WAAAL,GAAA,cAAAA,EAAA,CACA,KAAA,QAAAM,SAAA,KAAA,oDACAL,GAAAM,mBAAAC,KAAAC,WAAAC,EAAAjB,SAEAQ,GAAAM,mBAAAd,EAEAG,KACAM,EAAA,YAGAS,SAAAC,OAAApB,EAAA,IAAAS,EAAAF,EAAA,UAAAJ,EAAAO,GAEAW,IAAA,SAAArB,GAMA,IAAA,GALAsB,GAAAtB,EAAA,IACAuB,EAAAJ,SAAAC,OAAAI,MAAA,KACAvB,EAAA,GACAwB,EAAA,GACAC,KACAC,EAAA,EAAAA,EAAAJ,EAAAK,OAAAD,IAAA,CAEA,IADA,GAAAE,GAAAN,EAAAI,GACA,KAAAE,EAAAC,OAAA,IAAAD,EAAAA,EAAAE,UAAA,EAAAF,EAAAD,OACA,IAAA,IAAAC,EAAAG,QAAAV,GAAA,CAGA,GAFArB,EAAAgC,mBAAAJ,EAAAE,UAAAT,EAAAM,OAAAC,EAAAD,SACAH,EAAAxB,EAAA8B,UAAA,EAAA,GACA,KAAAN,EACA,IAEA,GADAC,EAAAV,KAAAkB,MAAAjC,GACA,KAAAyB,GAAA,MAAAA,GAAAR,EACA,MAAAiB,GACA,MAAAlC,GAGA,GAAA,aAAAA,EAAA,MACA,OAAAA,IAGA,MAAA,OAEAmC,OAAA,SAAApC,GACAqC,KAAAtC,IAAAC,EAAA,QAEAsC,UAAA,SAAAtC,EAAAE,GACA,GAAAD,GAAAoC,KAAAhB,IAAArB,IAAA,CACAqC,MAAAtC,IAAAC,EAAAuC,SAAAtC,EAAA,IAAA,EAAAC,IAEAsC,UAAA,SAAAxC,EAAAE,GACA,GAAAD,GAAAoC,KAAAhB,IAAArB,IAAA,CACAqC,MAAAtC,IAAAC,EAAAuC,SAAAtC,EAAA,IAAA,EAAAC,KClEAuC,+BAAAC,WAAAC,OAAAC,QAEAC,SAAAC,eAAAC,iBAAA,GAEAC,WAAA,SAAAC,GACAZ,KAAAa,SAAAC,SAAAC,MAAAC,QAAA,QAAA,cAAAhB,KAAAiB,mBAGAA,iBAAA,SAAAC,GAEA,GAAAT,eAAAU,cAAA,CAEA,GAAAC,GAAAF,EAAAG,MAEAC,EAAAF,EAAApC,IAAA,UAAAuC,WAAApD,KAAA,QAEA,OAAA,mBAAAmD,OACAE,QAAA,YAAAJ,EAAApC,IAAA,OAAAe,SAIAqB,EAAApC,IAAA,gCACAgB,KAAAyB,gBAAAL,GAGApB,KAAA0B,aAAAN,KAGAM,aAAA,SAAAN,GAGA,GAAAO,GAAA,GAAAC,iBACAD,GAAAE,SAEAL,OAAAM,MACAC,IAAA/B,KAAAQ,SAAA,SAAAY,EAAApC,IAAA,MACAb,KAAA,MACA6D,MACAC,SAAAC,cAAAC,OAEAC,OAAA,EACAC,QAAA,SAAAL,EAAAM,EAAAC,GAKA,GAJAf,OAAAG,EAAAa,KAAAC,QAAA,IAAA,WACAd,EAAA5B,WAGA,GAAAiC,EAAAU,MAAAnD,OAEA,WADAiC,QAAA,YAAAJ,EAAApC,IAAA,OAAAe,QAIA,IAAA4C,GAAAX,EAAAU,MAAAE,KAEAxB,GAAA1D,IAAA,UAAAiF,EAAAE,QAEA,IAAAC,GAAAnE,KAAAkB,MAAA8C,EAAAG,OAEAhC,UAAAC,MAAAC,QAAA,SAAA+B,QAAA,8BACA3B,EAAApC,IAAA,MACA8D,GAGAtB,OAAA,YAAAJ,EAAApC,IAAA,OAAAe,UAEAiD,MAAA,gBAMAvB,gBAAA,SAAAL,GAGA,GAAAO,GAAA,GAAAC,iBACAD,GAAAE,QAEA,IAAAoB,GAAA,GAAAC,qBACA9B,UAAAA,GAEA6B,GAAAE,OACAd,QAAA,WACAV,EAAA5B,QACA,IAAAqD,sBACAH,WAAAA,UCnFAI,gCAAAhD,WAAAC,OAAAC,QAEAxB,UAEA4B,WAAA,SAAAC,GAEAZ,KAAAjB,OAAA6B,EAAA7B,OAEAiB,KAAAa,SAAAyC,QAAAtC,QAAA,QAAA,cAAAhB,KAAAuD,iBAGAA,eAAA,SAAAC,GACA,GAAApC,GAAAoC,EAAAnC,KAEA,IAAAD,EAAApC,IAAA,8BAAA,CAEA,GAAAyE,GAAAzD,KAAAjB,OAAAC,IAAA,UAAAoC,EAAApC,IAAA,UAEA8B,UAAAC,MAAAC,QAAA,SAAA+B,QAAA,8BACA3B,EAAApC,IAAA,MACAyE,GAcAzD,KAAAa,SAAAyC,QAAAtC,QAAA,UAAA,oBAAAhB,KAAA0D,oBACA1D,KAAAa,SAAAyC,QAAAtC,QAAA,QAAAI,EAAApC,IAAA,OAAA,kBAAA,WACAgB,KAAAjB,OAAAgB,OAAA,UAAAqB,EAAApC,IAAA,WAIA0E,mBAAA,SAAAC,GAEA,GAAAhG,GAAA,UAAAgG,EAAA3E,IAAA,UAEA4E,EAAAD,EAAA3E,IAAA,UACAoC,EAAAN,SAAAC,MAAAC,QAAA,OAAA+B,QAAA,WAAAa,EAEA,IAAA,mBAAAxC,IACAA,EAAApC,IAAA,8BAAA,CAKA,GAAA6E,GAAA/C,SAAAC,MAAAC,QAAA,SAAA+B,QAAA,uBAAAa,EAEA5D,MAAAjB,OAAArB,IAAAC,EAAAkG,OCvDAC,mCAAAzD,WAAAC,OAAAC,QAEAC,SAAA,GAEAG,WAAA,SAAAC,GACAZ,KAAAQ,SAAAC,eAAAC,iBAAA,GAEAI,SAAAC,MAAAC,QAAA,SAAA+C,MAAA,iBAAA/D,KAAAgE,eAEAhE,KAAAa,SAAAyC,QAAAtC,QAAA,QAAA,aAAAhB,KAAAiE,kBACAjE,KAAAa,SAAAyC,QAAAtC,QAAA,QAAA,cAAAhB,KAAAkE,WACAlE,KAAAa,SAAAyC,QAAAtC,QAAA,QAAA,cAAAhB,KAAAmE,QAGAH,cAAA,SAAA5C,GACA,GAAAA,EAAAgD,SAAA,gBAAA,OAAA,GAGAH,iBAAA,SAAAN,GACA,GAAAU,GAAAvD,SAAAC,MAAAC,QAAA,QAAA2C,EAAA3E,IAAA,UACA2E,GAAA9C,SAAAwD,EAAA,gBAAArE,KAAAsE,aAAAX,GACAA,EAAA9C,SAAAwD,EAAA,gBAAArE,KAAAuE,MAAAC,KAAAb,IACAA,EAAA9C,SAAAwD,EAAA,kBAAArE,KAAAuE,MAAAC,KAAAb,IACAA,EAAA9C,SAAAwD,EAAA,kBAAArE,KAAAyE,SAAAD,KAAAxE,MAEA,IAAA4D,GAAAD,EAAA3E,IAAA,SACA2E,GAAA9C,SAAAwD,EAAA,gBAAA,WACAvD,SAAAC,MAAAC,QAAA,QAAA4C,GAAAb,QAAA,eAAA,kBAEAY,EAAA9C,SAAAwD,EAAA,kBAAA,WACAvD,SAAAC,MAAAC,QAAA,QAAA4C,GAAAb,QAAA,eAAA,kBAIAjC,SAAAC,MAAAC,QAAA,QAAA+C,MAAA,iBAAA,SAAAF,GACAD,EAAAD,EAAA3E,IAAA,SACA,IAAAoC,GAAAN,SAAAC,MAAAC,QAAA,OAAA+B,QAAA,WAAAa,EAKA,OAJA,mBAAAxC,KACAyC,EAAAhB,QAAAzB,EAAApC,IAAA,YAEA6E,EAAAf,OAAAhC,SAAAC,MAAAC,QAAA,SAAA+B,QAAA,uBAAAa,GACAC,IAEA7D,KAAAa,SAAAyC,QAAAtC,QAAA,UAAA,aAAAhB,KAAA0E,yBAGAA,uBAAA,SAAAf,GACAA,EAAA9C,SAAAyC,QAAAtC,QAAA,QAAA2C,EAAA3E,IAAA,WAAA,gBAAA,SAAAoC,GAGAN,SAAAC,MAAAC,QAAA,QAAAI,EAAApC,IAAA,OAAA+D,QAAA,YAAA,kBAGA,mBAAA/C,MAAAhB,IAAA,aACAgB,KAAAtC,IAAA,QAAAsC,KAAAhB,IAAA,aAEAgB,KAAAtC,IAAA,YAAA,GACAsC,KAAA2E,QAAA,cACAhB,IAGAW,aAAA,WACAtE,KAAAtC,IAAA,YAAA,GACAsC,KAAA2E,QAAA,aAGAT,UAAA,SAAAU,GACAnE,eAAAU,eACA0D,WAAA,WACAD,EAAA7E,UACA,MAGAoE,MAAA,SAAArE,EAAA6D,GAEAA,EAAAjG,IAAA,YAAA,GACAiG,EAAAjG,IAAA,WAAAiG,EAAA3E,IAAA,UACA2E,EAAAjG,IAAA,QAAAiG,EAAA3E,IAAA,qBACA8F,QAAAC,IAAApB,GACAA,EAAAgB,QAAA,WAEA,IAAAf,GAAAD,EAAA3E,IAAA,UACAoC,EAAAN,SAAAC,MAAAC,QAAA,OAAA+B,QAAA,WAAAa,EAGA9C,UAAAC,MAAAC,QAAA,QAAA4C,GAAAb,QAAA,YAAA,eAAA,GAGAjC,SAAAC,MAAAC,QAAA,QAAA4C,GAAAb,QAAA,SAAA3B,IAGAqD,SAAA,SAAAA,EAAAnC,EAAAC,EAAAqB,GAGA,GAAAa,EAAAzC,KAAAgD,SAAAC,eACAzD,OAAA,YAAAiD,EAAAzC,KAAAkD,SAAAC,QAIAZ,MAAA,WACAO,QAAAC,IAAA/E,MACAA,KAAAtC,IAAA,YAAA,GACA,mBAAAsC,MAAAhB,IAAA,aACAgB,KAAAtC,IAAA,QAAAsC,KAAAhB,IAAA,aAEAgB,KAAA2E,QAAA,eC5GAS,UAAAtE,SAAAuE,MAAA9E,QAEAV,MAAA,SAAA4E,EAAA7D,GAGA,MADA6D,GAAA3B,OAAAnE,KAAAkB,MAAA4E,EAAA3B,QACA2B,KCLAvB,gBAAApC,SAAAwE,WAAA/E,QACAc,MAAA+D,UAEArD,IAAA,WACA,GAAA6B,GAAA5D,KAAAoB,UAAApC,IAAA,KACA,OAAAyB,gBAAAC,gBAAA,SAAAkD,GAGAjD,WAAA,SAAA4E,EAAA3E,GACAZ,KAAAoB,UAAAR,EAAAQ,WAGAvB,MAAA,SAAA4E,GACA,GAAA,mBAAAA,GAAA/B,MACA,MAAA+B,GAAA/B,OAGA8C,eAAA,SAAAC,GAEA,mBAAAvD,eAAAC,OACAsD,EAAAC,iBAAA,aAAAxD,cAAAC,QAKAwD,KAAA,SAAAC,EAAAvE,EAAAT,GAKA,MAJAA,GAAAA,MACAA,EAAAiF,WAAA7F,KAAAwF,eAGA1E,SAAA6E,KAAAC,EAAAvE,EAAAT,MC9BAkF,aAAAzF,WAAA0F,SAAAxF,QACAyF,QAAA,KACAC,UAAA,gBACAC,SAAA,qBAEAC,QACAC,cAAA,SAAAtG,GAEA0B,OAAA1B,EAAAuG,QAAAC,QAAA,kBAAAC,KAAA,WAAAC,YAAA,UACAhF,OAAA1B,EAAAuG,QAAAC,QAAA,MAAAG,SAAA,SAEA,IAAA7C,GAAA5D,KAAAqB,MAAArC,IAAA,UACA8B,UAAAC,MAAAC,QAAA,SAAA+B,QAAA,8BAAAa,EACA5D,KAAAqB,MAAArC,IAAA,UAGA,IAAAoC,GAAAN,SAAAC,MAAAC,QAAA,OAAA+B,QAAA,WAAAa,EACA,oBAAAxC,IACAA,EAAA1D,IAAA,UAAAsC,KAAAqB,MAAArC,IAAA,aAGA0H,gBAAA,SAAA5G,GACA0B,OAAA1B,EAAAuG,QAAAC,QAAA,MAAAE,YAAA,SAEA,IAAA5C,GAAA5D,KAAAqB,MAAArC,IAAA,WACAoC,EAAAN,SAAAC,MAAAC,QAAA,OAAA+B,QAAA,WAAAa,GACA+C,EAAAvF,EAAApC,IAAA,UACA4H,EAAAxF,EAAApC,IAAA,eACA2H,GAAApC,MAAAqC,KAIAC,gBAAA,WACA,GAAAC,GAAA9G,IACA,QACA+G,QAAAC,OAAAhH,KAAA+G,SAAAE,OAAA,oBACAC,QAAA,WACApC,QAAAC,IAAA+B,EAAAzF,MACA,IAAAD,GAAAkC,QAAAtC,QAAA,OAAA+B,QAAA,WAAA+D,EAAAzF,MAAArC,IAAA,YACAkI,EAAA9F,EAAApC,IAAA,+BACAmI,EAAA,EAWA,OAVAC,GAAAC,KAAAH,EAAA,SAAAI,GACA,GAAA3D,GAAAvC,EAAApC,IAAA,UAAAuH,KAAA,SAAAgB,GACA,MAAAD,GAAAC,OAAAA,EAAAvI,IAAA,SAEAwI,EAAAV,EAAAzF,MAAArC,IAAA,UAAAuH,KAAA,SAAAgB,GACA,MAAA5D,GAAA3E,IAAA,OAAAuI,EAAAE,KAEAC,EAAA,mBAAAF,GAAAA,EAAA5J,MAAA,EACAuJ,IAAA,OAAAO,EAAA,UAEAP,OCnDAQ,cAAAtH,WAAA0F,SAAAxF,QACAyF,QAAA,UACAE,SAAA,sBAEAvF,WAAA,WACAX,KAAA4H,GAAA,SAAA5H,KAAA6H,cAGAA,YAAA,WACA,GAAAC,GAAA9H,IACA6E,YAAA,WACArD,OAAAsG,EAAAtF,KAAAC,QAAA,OAAA,WACAqF,EAAA/H,YAEA,QCdA6B,iBAAAvB,WAAA0F,SAAAxF,QACAyF,QAAA,aACAE,SAAA,yBACA6B,GAAA,uBCHA3E,oBAAA/C,WAAA2H,cAAAzH,QACAyF,QAAA,QACAiC,UAAAnC,aACAoC,UAAAP,cACAQ,mBAAA,QACAjC,SAAA,sBAEAvF,WAAA,SAAAC,GAEA,GAAAgD,GAAA5D,KAAAiD,WAAA7B,UAAApC,IAAA,KAEAgB,MAAA+H,GAAA,YAAAnE,EAAA,SAGA5D,KAAAwC,IAAAhB,OAAAxB,KAAA+H,IAEA/H,KAAA6B,SAEA7B,KAAAa,SAAAC,SAAAC,MAAAC,QAAA,QAAA4C,GAAA,kBAAA,WACA,GAAAwE,GAAApI,IACAA,MAAAiD,WAAAE,OACAd,QAAA,WACA+F,EAAAvG,aAGA7B,OAGAqI,SAAA,WACA,GAAArI,KAAAiD,WAAA1D,QACAS,KAAAwC,IAAA2C,OACAnF,KAAAwC,IAAA8F,SAAAnD,SAEAnF,KAAAwC,IAAA+F,OACAvI,KAAAwC,IAAA8F,SAAAC,SAIA1B,gBAAA,WACA,GAAAC,GAAA9G,IACA,QACAwI,QAAA,WACA,GAAApH,GAAA0F,EAAA7D,WAAA7B,UACA8F,EAAA9F,EAAApC,IAAA,+BACAmI,EAAA,EAOA,OANAC,GAAAC,KAAAH,EAAA,SAAAI,GACA,GAAA3D,GAAAvC,EAAApC,IAAA,UAAAuH,KAAA,SAAAgB,GACA,MAAAD,GAAAC,OAAAA,EAAAvI,IAAA,QAEAmI,IAAA,OAAAxD,EAAA3E,IAAA,SAAA,UAEAmI,OCnDAsB,gBAAApI,WAAAqI,YAAAnI,QAEAI,WAAA,SAAAC,GAGA,GAAAR,gCACA,GAAA0D,oCACA,GAAAT,kCAAAtE,OAAAtB,kBAEAqD,SAAAC,MAAAC,QAAA,SAAA+C,MAAA,uBAAA/D,KAAA2I,mBAAA3I,MACAc,SAAAC,MAAAC,QAAA,SAAA+C,MAAA,8BAAA/D,KAAA4I,uBAAA5I,OAGA2I,mBAAA,SAAA/E,GACA,GAAAxC,GAAAN,SAAAC,MAAAC,QAAA,OAAA+B,QAAA,WAAAa,GACAiF,EAAAzH,EAAApC,IAAA,UAAA8J,IAAA,SAAAnF,EAAAoF,GACA,MAAA3B,GAAA4B,KAAArF,EAAAsF,YAAA,WAAA,aAAA,cAAA,UAAA,gBAAA,oBAAA,SAAA,SAAA,MAAA,QAAA,YAAA,eAAA,eAAA,aAAA,gBAAA,QAAA,aAAA,cAAA,WAAA,OAAA,mBAEA,OAAAJ,IAGAD,uBAAA,SAAAhF,EAAAsF,GACA,GAAA9H,GAAAN,SAAAC,MAAAC,QAAA,OAAA+B,QAAA,WAAAa,GACA+C,EAAAvF,EAAApC,IAAA,UAEA4H,EAAAxF,EAAApC,IAAA,eACA2H,GAAApC,MAAAqC,GAEAQ,EAAAC,KAAA6B,EAAA,SAAA1B,GACA,GAAA2B,GAAAjJ,SAAAsH,EAAAC,IACAF,EAAAZ,EAAA3H,IAAAmK,GACAN,EAAAzB,EAAA4B,KAAAxB,GAAA,MAGA,oBAAAqB,GAAAO,UACAP,EAAAO,QAAAP,EAAAO,QAAAC,YAGA,mBAAA9B,IACAA,EAAA7J,IAAAmL,OCvCArH,QAAA1C,UAAAwK,MAAA,SAAAC,GACA,GAAA9I,GAAA,GAAAgI,gBACAhI,GAAA+I","file":"front-end.min.js","sourcesContent":["/*!\r\n * cookie-monster - a simple cookie library\r\n * v0.3.0\r\n * https://github.com/jgallen23/cookie-monster\r\n * copyright Greg Allen 2014\r\n * MIT License\r\n */\r\n/*\r\n * MODIFICATIONS: renamed assigned variable name to avoid conflicts.\r\n */\r\nvar nfCookieMonster = {\r\n    set: function(name, value, days, path, secure) {\r\n        var date = new Date(),\r\n            expires = '',\r\n            type = typeof(value),\r\n            valueToUse = '',\r\n            secureFlag = '';\r\n        path = path || \"/\";\r\n        if (days) {\r\n            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\r\n            expires = \"; expires=\" + date.toUTCString();\r\n        }\r\n        if (type === \"object\"  && type !== \"undefined\") {\r\n            if(!(\"JSON\" in window)) throw \"Bummer, your browser doesn't support JSON parsing.\";\r\n            valueToUse = encodeURIComponent(JSON.stringify({v:value}));\r\n        } else {\r\n            valueToUse = encodeURIComponent(value);\r\n        }\r\n        if (secure){\r\n            secureFlag = \"; secure\";\r\n        }\r\n\r\n        document.cookie = name + \"=\" + valueToUse + expires + \"; path=\" + path + secureFlag;\r\n    },\r\n    get: function(name) {\r\n        var nameEQ = name + \"=\",\r\n            ca = document.cookie.split(';'),\r\n            value = '',\r\n            firstChar = '',\r\n            parsed={};\r\n        for (var i = 0; i < ca.length; i++) {\r\n            var c = ca[i];\r\n            while (c.charAt(0) == ' ') c = c.substring(1, c.length);\r\n            if (c.indexOf(nameEQ) === 0) {\r\n                value = decodeURIComponent(c.substring(nameEQ.length, c.length));\r\n                firstChar = value.substring(0, 1);\r\n                if(firstChar==\"{\"){\r\n                    try {\r\n                        parsed = JSON.parse(value);\r\n                        if(\"v\" in parsed) return parsed.v;\r\n                    } catch(e) {\r\n                        return value;\r\n                    }\r\n                }\r\n                if (value==\"undefined\") return undefined;\r\n                return value;\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n    remove: function(name) {\r\n        this.set(name, \"\", -1);\r\n    },\r\n    increment: function(name, days) {\r\n        var value = this.get(name) || 0;\r\n        this.set(name, (parseInt(value, 10) + 1), days);\r\n    },\r\n    decrement: function(name, days) {\r\n        var value = this.get(name) || 0;\r\n        this.set(name, (parseInt(value, 10) - 1), days);\r\n    }\r\n};","/**\r\n * Save User Progress Active Controller\r\n */\r\nvar nfSaveProgressActiveController = Marionette.Object.extend({\r\n\r\n    endpoint: nfSaveProgress.restApiEndpoint || '',\r\n\r\n    initialize: function( options ) {\r\n        this.listenTo( Backbone.Radio.channel( 'form' ), 'render:view', this.onFormRenderView );\r\n    },\r\n\r\n    onFormRenderView: function( formLayoutView ) {\r\n\r\n        if( ! nfSaveProgress.currentUserID ) return;\r\n\r\n        var formModel = formLayoutView.model;\r\n\r\n        var saveField = formModel.get( 'fields' ).findWhere( { type: 'save' } );\r\n\r\n        if( 'undefined' == typeof saveField ) {\r\n            jQuery( '#formSave' + formModel.get( 'id' ) ).remove();\r\n            return;\r\n        }\r\n\r\n        if( formModel.get( 'save_progress_allow_multiple' ) ){\r\n            return this.renderSaveTable( formModel );\r\n        }\r\n\r\n        return this.loadLastSave( formModel );\r\n    },\r\n\r\n    loadLastSave: function( formModel ) {\r\n\r\n        // render loading view\r\n        var loading = new SavesLoadingView();\r\n        loading.render();\r\n\r\n        jQuery.ajax({\r\n            url: this.endpoint + 'saves/' + formModel.get( 'id' ),\r\n            type: 'GET',\r\n            data: {\r\n                _wpnonce: wpApiSettings.nonce,\r\n            },\r\n            cache: false,\r\n            success: function( data, textStatus, jqXHR ){\r\n                jQuery( loading.$el ).slideUp( 400, function(){\r\n                    loading.remove();\r\n                });\r\n\r\n                if( 0 == data.saves.length ) {\r\n                    jQuery( '#formSave' + formModel.get( 'id' ) ).remove();\r\n                    return;\r\n                }\r\n\r\n                var save = data.saves.pop();\r\n\r\n                formModel.set( 'save_id', save.save_id );\r\n\r\n                var fields = JSON.parse( save.fields );\r\n\r\n                Backbone.Radio.channel( 'forms' ).request( 'save:updateFieldsCollection',\r\n                    formModel.get( 'id' ),\r\n                    fields\r\n                );\r\n\r\n                jQuery( '#formSave' + formModel.get( 'id' ) ).remove();\r\n            },\r\n            error: function(){\r\n\r\n            }\r\n        });\r\n    },\r\n\r\n    renderSaveTable: function( formModel ) {\r\n\r\n        // render loading view\r\n        var loading = new SavesLoadingView();\r\n        loading.render();\r\n\r\n        var collection = new SavesCollection( [], {\r\n            formModel: formModel\r\n        });\r\n        collection.fetch({\r\n            success: function(){\r\n                loading.remove();\r\n                var collectionView = new SavesCollectionView( {\r\n                    collection: collection,\r\n                } );\r\n            }\r\n        });\r\n    },\r\n\r\n});\r\n","/**\r\n * Save Progress Passive Controller\r\n */\r\nvar nfSaveProgressPassiveController = Marionette.Object.extend({\r\n\r\n    cookie: {},\r\n\r\n    initialize: function( options ) {\r\n\r\n        this.cookie = options.cookie;\r\n\r\n        this.listenTo( nfRadio.channel( 'form' ), 'render:view', this.onFormRendered );\r\n    },\r\n\r\n    onFormRendered: function( formView ) {\r\n        var formModel = formView.model;\r\n\r\n        if( ! formModel.get( 'save_progress_passive_mode' ) ) return;\r\n\r\n        var formData = this.cookie.get( 'nfForm-' + formModel.get( 'id' ) ) || {};\r\n\r\n        Backbone.Radio.channel( 'forms' ).request( 'save:updateFieldsCollection',\r\n            formModel.get( 'id' ),\r\n            formData\r\n        );\r\n\r\n        // if( ! formData ) return;\r\n        //\r\n        // _.each( formData, function( fieldValue, fieldID ){\r\n        //     var fieldModel = formModel.get( 'fields' ).get( fieldID );\r\n        //\r\n        //     if( 'undefined' == typeof fieldModel ) return;\r\n        //\r\n        //     fieldModel.set( 'value', fieldValue );\r\n        //     fieldModel.trigger( 'reRender' );\r\n        // });\r\n\r\n        this.listenTo( nfRadio.channel( 'fields' ), 'change:modelValue', this.onChangeModelValue );\r\n        this.listenTo( nfRadio.channel( 'form-' + formModel.get( 'id' ) ), 'submit:response', function(){\r\n            this.cookie.remove( 'nfForm-' + formModel.get( 'id' ) );\r\n        } );\r\n    },\r\n\r\n    onChangeModelValue: function( fieldModel ) {\r\n\r\n        var name = 'nfForm-' + fieldModel.get( 'formID' );\r\n\r\n        var formID    = fieldModel.get( 'formID' );\r\n        var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\r\n\r\n        if( 'undefined' == typeof formModel ) return;\r\n        if( ! formModel.get( 'save_progress_passive_mode' ) ) return;\r\n\r\n        // var formData = this.cookie.get( name ) || {};\r\n        // formData[ fieldModel.get( 'id' ) ] = fieldModel.get( 'value' );\r\n\r\n        var fieldData = Backbone.Radio.channel( 'forms' ).request( 'save:fieldAttributes', formID );\r\n\r\n        this.cookie.set( name, fieldData );\r\n    },\r\n\r\n});\r\n","/**\r\n * Save Progress Save Button Controller\r\n */\r\nvar nfSaveProgressSaveButtonController = Marionette.Object.extend({\r\n\r\n    endpoint: '',\r\n\r\n    initialize: function( options ) {\r\n        this.endpoint = nfSaveProgress.restApiEndpoint || '';\r\n\r\n        Backbone.Radio.channel( 'forms' ).reply( 'maybe:validate', this.maybeValidate );\r\n\r\n        this.listenTo( nfRadio.channel( 'save' ), 'init:model', this.registerHandlers );\r\n        this.listenTo( nfRadio.channel( 'save' ), 'render:view', this.maybeHide );\r\n        this.listenTo( nfRadio.channel( 'save' ), 'click:field', this.click );\r\n    },\r\n\r\n    maybeValidate: function( formModel ) {\r\n        if( formModel.getExtra( 'saveProgress' ) ) return false;\r\n    },\r\n\r\n    registerHandlers: function( fieldModel ) {\r\n         var formChannel = Backbone.Radio.channel( 'form-' + fieldModel.get( 'formID' ) );\r\n        fieldModel.listenTo( formChannel, 'before:submit', this.beforeSubmit, fieldModel );\r\n        fieldModel.listenTo( formChannel, 'submit:cancel',   this.reset.bind( fieldModel ) );\r\n        fieldModel.listenTo( formChannel, 'submit:response', this.reset.bind( fieldModel ) );\r\n        fieldModel.listenTo( formChannel, 'submit:response', this.response.bind( this ) );\r\n\r\n         var formID = fieldModel.get( 'formID' );\r\n         fieldModel.listenTo( formChannel, 'submit:failed', function(){\r\n             Backbone.Radio.channel( 'form-' + formID ).request( 'remove:extra', 'saveProgress' );\r\n         } );\r\n         fieldModel.listenTo( formChannel, 'submit:response', function(){\r\n             Backbone.Radio.channel( 'form-' + formID ).request( 'remove:extra', 'saveProgress' );\r\n         } );\r\n\r\n        // Add progress to Save field submission data.\r\n        Backbone.Radio.channel( 'save' ).reply( 'get:submitData', function( fieldData ){\r\n            formID = fieldModel.get( 'formID' );\r\n            var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\r\n            if( 'undefined' != typeof formModel ){\r\n                fieldData.save_id = formModel.get( 'save_id' );\r\n            }\r\n            fieldData.fields = Backbone.Radio.channel( 'forms' ).request( 'save:fieldAttributes', formID );\r\n            return fieldData;\r\n        } );\r\n        this.listenTo( nfRadio.channel( 'submit' ), 'init:model', this.registerSubmitHandlers );\r\n    },\r\n\r\n    registerSubmitHandlers: function( fieldModel ) {\r\n        fieldModel.listenTo( nfRadio.channel( 'form-' + fieldModel.get( 'formID' ) ), 'before:submit', function( formModel ){\r\n\r\n            // If this isn't a save, then bail.\r\n            if( ! Backbone.Radio.channel( 'form-' + formModel.get( 'id' ) ).request( 'get:extra', 'saveProgress' ) ) return;\r\n\r\n            // Reset the submit button's label, because this is a save, not a submit.\r\n            if ( 'undefined' != typeof this.get( 'oldLabel' ) ) {\r\n                this.set( 'label', this.get( 'oldLabel' ) );\r\n            }\r\n            this.set( 'disabled', true );\r\n            this.trigger( 'reRender' );\r\n        }, fieldModel );\r\n    },\r\n\r\n    beforeSubmit: function() {\r\n        this.set( 'disabled', true );\r\n        this.trigger( 'reRender' );\r\n    },\r\n\r\n    maybeHide: function( fieldView ) {\r\n        if( nfSaveProgress.currentUserID ) return;\r\n        setTimeout(function(){\r\n            fieldView.remove();\r\n        }, 500);\r\n    },\r\n\r\n    click: function( e, fieldModel ) {\r\n\r\n        fieldModel.set( 'disabled', true );\r\n        fieldModel.set( 'oldLabel', fieldModel.get( 'label' ) );\r\n        fieldModel.set( 'label', fieldModel.get( 'processing_label' ) );\r\n        console.log( fieldModel );\r\n        fieldModel.trigger( 'reRender' );\r\n\r\n        var formID    = fieldModel.get( 'formID' );\r\n        var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\r\n\r\n        // Flag the submission as a Save.\r\n        Backbone.Radio.channel( 'form-' + formID ).request( 'add:extra', 'saveProgress', 1 );\r\n\r\n        // Submit the form.\r\n        Backbone.Radio.channel( 'form-' + formID ).request( 'submit', formModel );\r\n    },\r\n\r\n    response: function( response, textStatus, jqXHR, formID ) {\r\n\r\n        /* If we are hiding the form, then also hide the saves table. */\r\n        if( 1 == response.data.settings.hide_complete ){\r\n            jQuery( '#formSave' + response.data.form_id ).hide();\r\n        }\r\n    },\r\n\r\n    reset: function(){\r\n        console.log( this );\r\n        this.set( 'disabled', false );\r\n        if( 'undefined' != typeof this.get( 'oldLabel' ) ) {\r\n            this.set('label', this.get('oldLabel'));\r\n        }\r\n        this.trigger( 'reRender' );\r\n    }\r\n\r\n});\r\n","var SaveModel = Backbone.Model.extend( {\r\n\r\n    parse: function( response, options )\r\n    {\r\n        response.fields = JSON.parse( response.fields );\r\n        return response;\r\n    }\r\n});\r\n","var SavesCollection = Backbone.Collection.extend( {\r\n    model: SaveModel,\r\n\r\n    url: function() {\r\n        var formID = this.formModel.get( 'id' );\r\n        return nfSaveProgress.restApiEndpoint + 'saves/' + formID;\r\n    },\r\n\r\n    initialize: function( models, options ) {\r\n        this.formModel = options.formModel;\r\n    },\r\n\r\n    parse: function( response ){\r\n        if( 'undefined' == typeof response.saves ) return;\r\n        return response.saves;\r\n    },\r\n\r\n    setAuthHeaders: function( xhr ) {\r\n        // If we have a localized nonce, pass that along with each sync.\r\n        if ( 'undefined' !== typeof wpApiSettings.nonce ) {\r\n            xhr.setRequestHeader( 'X-WP-Nonce', wpApiSettings.nonce );\r\n        }\r\n    },\r\n\r\n    // https://developer.wordpress.org/rest-api/using-the-rest-api/authentication/\r\n    sync: function( method, model, options ) {\r\n        options = options || {};\r\n        options.beforeSend = this.setAuthHeaders;\r\n\r\n        // Continue by calling Bacckbone's sync.\r\n        return Backbone.sync( method, model, options );\r\n    }\r\n});\r\n","var SaveItemView = Marionette.ItemView.extend({\r\n    tagName: 'tr',\r\n    className: 'nf-saves-item',\r\n    template: '#tmpl-nf-save-item',\r\n\r\n    events: {\r\n        'click .load': function( e ){\r\n\r\n            jQuery( e.target ).closest( '.nf-saves-cont' ).find( '.active' ).removeClass( 'active' );\r\n            jQuery( e.target ).closest( 'tr' ).addClass( 'active' );\r\n\r\n            var formID = this.model.get( 'form_id' );\r\n            Backbone.Radio.channel( 'forms' ).request( 'save:updateFieldsCollection', formID,\r\n                this.model.get( 'fields' )\r\n            );\r\n\r\n            var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\r\n            if( 'undefined' != typeof formModel ){\r\n                formModel.set( 'save_id', this.model.get( 'save_id' ) );\r\n            }\r\n        },\r\n        'click .cancel': function( e ){\r\n            jQuery( e.target ).closest( 'tr' ).removeClass( 'active' );\r\n\r\n            var formID = this.model.get( 'form_id' );\r\n            var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\r\n            var fieldsCollection = formModel.get( 'fields' );\r\n            var defaults = formModel.get( 'loadedFields' );\r\n            fieldsCollection.reset( defaults );\r\n        }\r\n    },\r\n\r\n    templateHelpers: function(){\r\n        var view = this;\r\n        return {\r\n            updated: moment( this.updated ).format( 'MM/DD/YY, h:mm A' ),\r\n            columns: function(){\r\n                console.log(view.model);\r\n                var formModel = nfRadio.channel( 'app' ).request( 'get:form', view.model.get( 'form_id' ) );\r\n                var columns = formModel.get( 'save_progress_table_columns' );\r\n                var $return = '';\r\n                _.each( columns, function( column ){\r\n                    var fieldModel = formModel.get( 'fields' ).find( function( field ){\r\n                       return column.field ==  field.get( 'key' );\r\n                    });\r\n                    var savedField = view.model.get( 'fields' ).find( function( field ){\r\n                       return fieldModel.get( 'id' ) == field.id;\r\n                    });\r\n                    var fieldValue = ( 'undefined' != typeof savedField ) ? savedField.value : '';\r\n                    $return += '<td>' + fieldValue + '</td>';\r\n                })\r\n                return $return;\r\n            }\r\n        }\r\n    }\r\n});\r\n","var SaveEmptyView = Marionette.ItemView.extend({\r\n    tagName: 'nf-save',\r\n    template: '#tmpl-nf-save-empty',\r\n\r\n    initialize: function() {\r\n        this.on( 'render', this.afterRender );\r\n    },\r\n\r\n    afterRender: function(){\r\n        var that = this;\r\n        setTimeout(function(){\r\n            jQuery( that.$el ).slideUp( 'slow', function(){\r\n                that.remove();\r\n            });\r\n        }, 2000);\r\n    }\r\n});\r\n","var SavesLoadingView = Marionette.ItemView.extend({\r\n    tagName: \"nf-section\",\r\n    template: \"#tmpl-nf-saves-loading\",\r\n    el: \".form-save-loading\"\r\n});\r\n","var SavesCollectionView = Marionette.CompositeView.extend({\r\n    tagName: 'table',\r\n    childView: SaveItemView,\r\n    emptyView: SaveEmptyView,\r\n    childViewContainer: 'tbody',\r\n    template: '#tmpl-nf-save-table',\r\n\r\n    initialize: function( options ){\r\n\r\n        var formID = this.collection.formModel.get( 'id' );\r\n        // Set element selector\r\n        this.el = '#formSave' + formID + ' table';\r\n\r\n        // Update element cache\r\n        this.$el = jQuery( this.el );\r\n\r\n        this.render();\r\n\r\n        this.listenTo( Backbone.Radio.channel( 'form-' + formID ), 'submit:response', function(){\r\n            var collectionView = this;\r\n            this.collection.fetch({\r\n                success: function(){\r\n                    collectionView.render();\r\n                }\r\n            });\r\n        }, this );\r\n    },\r\n\r\n    onRender: function(){\r\n        if( 0 == this.collection.length ){\r\n            this.$el.hide();\r\n            this.$el.parent().hide();\r\n        } else {\r\n            this.$el.show();\r\n            this.$el.parent().show();\r\n        }\r\n    },\r\n\r\n    templateHelpers: function(){\r\n        var view = this;\r\n        return {\r\n            headers: function(){\r\n                var formModel = view.collection.formModel;\r\n                var columns = formModel.get( 'save_progress_table_columns' );\r\n                var $return = '';\r\n                _.each( columns, function( column ){\r\n                    var fieldModel = formModel.get( 'fields' ).find( function( field ){\r\n                        return column.field ==  field.get( 'key' );\r\n                    });\r\n                    $return += '<th>' + fieldModel.get( 'label' ) + '</th>';\r\n                })\r\n                return $return;\r\n            }\r\n        }\r\n    }\r\n});\r\n","var NF_SaveProgress = Marionette.Application.extend({\r\n\r\n    initialize: function( options ){\r\n\r\n        // Load Controllers.\r\n        new nfSaveProgressActiveController();\r\n        new nfSaveProgressSaveButtonController();\r\n        new nfSaveProgressPassiveController( { cookie: nfCookieMonster } );\r\n\r\n        Backbone.Radio.channel( 'forms' ).reply( 'save:fieldAttributes', this.getfieldAttributes, this );\r\n        Backbone.Radio.channel( 'forms' ).reply( 'save:updateFieldsCollection', this.updateFieldsCollection, this );\r\n    },\r\n\r\n    getfieldAttributes: function( formID ) {\r\n        var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\r\n        var atts = formModel.get( 'fields' ).map( function( fieldModel, key ) {\r\n            return _.omit( fieldModel.attributes, [ 'disabled', 'afterField', 'beforeField', 'classes', 'confirm_field', 'element_templates', 'errors', 'formID', 'key', 'label', 'label_pos', 'mirror_field', 'objectDomain', 'objectType', 'old_classname', 'order', 'parentType', 'placeholder', 'reRender', 'type', 'wrap_template' ] );\r\n        });\r\n        return atts;\r\n    },\r\n\r\n    updateFieldsCollection: function( formID, savedFields ){\r\n        var formModel = Backbone.Radio.channel( 'app' ).request( 'get:form', formID );\r\n        var fieldsCollection = formModel.get( 'fields' );\r\n\r\n        var defaults = formModel.get( 'loadedFields' );\r\n        fieldsCollection.reset( defaults );\r\n\r\n        _.each( savedFields, function( savedField ){\r\n            var fieldID = parseInt( savedField.id );\r\n            var field   = fieldsCollection.get( fieldID );\r\n            var atts    = _.omit( savedField, [ 'id' ] );\r\n\r\n            // Force `visible` attribute to a String\r\n            if( 'undefined' != typeof atts.visible ) {\r\n                atts.visible = atts.visible.toString();\r\n            }\r\n\r\n            if( 'undefined' != typeof field ) {\r\n                field.set(atts);\r\n            }\r\n        });\r\n    }\r\n});\r\n","jQuery( document ).ready( function( $ ) {\r\n    var nfSaveProgress = new NF_SaveProgress();\r\n    nfSaveProgress.start();\r\n});\r\n"]}